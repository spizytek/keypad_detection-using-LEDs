
keypad_interfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ac  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000454  0800045c  0001045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000454  08000454  0001045c  2**0
                  CONTENTS
  4 .ARM          00000000  08000454  08000454  0001045c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000454  0800045c  0001045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000454  08000454  00010454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000458  08000458  00010458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800045c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800045c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001045c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000979  00000000  00000000  0001048c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001c1  00000000  00000000  00010e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000050  00000000  00000000  00010fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00011018  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001c1f  00000000  00000000  00011050  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000062c  00000000  00000000  00012c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00007e78  00000000  00000000  0001329b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001b113  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000084  00000000  00000000  0001b190  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800043c 	.word	0x0800043c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800043c 	.word	0x0800043c

080001e8 <main>:

void delay (void);


int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b088      	sub	sp, #32
 80001ec:	af00      	add	r7, sp, #0
	uint32_t volatile *const pClkctrlReg = (uint32_t*)(0x40023800 + 0x30);       //peripheral clock enable memory address
 80001ee:	4b5a      	ldr	r3, [pc, #360]	; (8000358 <main+0x170>)
 80001f0:	61fb      	str	r3, [r7, #28]
	uint32_t volatile *const pModeReg_A = (uint32_t*)(0x40020000);           // mode register address for portA
 80001f2:	4b5a      	ldr	r3, [pc, #360]	; (800035c <main+0x174>)
 80001f4:	61bb      	str	r3, [r7, #24]
	uint32_t volatile *const pModeReg_D = (uint32_t*)(0x40020C00);          // mode register address for portD
 80001f6:	4b5a      	ldr	r3, [pc, #360]	; (8000360 <main+0x178>)
 80001f8:	617b      	str	r3, [r7, #20]

	uint32_t volatile *const pOutputDataReg_A = (uint32_t*)(0x40020000 + 0x14);          //output mode register address for port A
 80001fa:	4b5a      	ldr	r3, [pc, #360]	; (8000364 <main+0x17c>)
 80001fc:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pInputDataReg_A = (uint32_t*)(0x40020000 + 0x10);           //input mode register address for port A
 80001fe:	4b5a      	ldr	r3, [pc, #360]	; (8000368 <main+0x180>)
 8000200:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const pPullUpDownReg_A = (uint32_t*)(0x40020000+ 0x0C);           //pull up register for port A
 8000202:	4b5a      	ldr	r3, [pc, #360]	; (800036c <main+0x184>)
 8000204:	60bb      	str	r3, [r7, #8]

	uint32_t volatile *const pOutputDataReg_D = (uint32_t*)(0x40020C00 + 0x14);         //output mode register address for port D
 8000206:	4b5a      	ldr	r3, [pc, #360]	; (8000370 <main+0x188>)
 8000208:	607b      	str	r3, [r7, #4]

//	uint32_t volatile *const pPullUpDownReg_D = (uint32_t*)0x40020C0C;    //pull down register for port A


// enable clock for port A and port D
	*pClkctrlReg |= (1 << 0); // port A
 800020a:	69fb      	ldr	r3, [r7, #28]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f043 0201 	orr.w	r2, r3, #1
 8000212:	69fb      	ldr	r3, [r7, #28]
 8000214:	601a      	str	r2, [r3, #0]
	*pClkctrlReg |= (1 << 3); // port D
 8000216:	69fb      	ldr	r3, [r7, #28]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f043 0208 	orr.w	r2, r3, #8
 800021e:	69fb      	ldr	r3, [r7, #28]
 8000220:	601a      	str	r2, [r3, #0]

// configuring PD11 and PD12 as output (Rows).
	*pModeReg_D &= ~(0xF << 22);   //clear
 8000222:	697b      	ldr	r3, [r7, #20]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f023 7270 	bic.w	r2, r3, #62914560	; 0x3c00000
 800022a:	697b      	ldr	r3, [r7, #20]
 800022c:	601a      	str	r2, [r3, #0]
	*pModeReg_D |=  (0x5 << 22);  //set
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 72a0 	orr.w	r2, r3, #20971520	; 0x1400000
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	601a      	str	r2, [r3, #0]

// configuring PA2 and PA3 as input (Columns).
	*pModeReg_A &= ~(0xf << 4);
 800023a:	69bb      	ldr	r3, [r7, #24]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000242:	69bb      	ldr	r3, [r7, #24]
 8000244:	601a      	str	r2, [r3, #0]

// configuring PA4 and PA5 as output for LED
	*pModeReg_A &= ~(0xF << 8);//clear
 8000246:	69bb      	ldr	r3, [r7, #24]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800024e:	69bb      	ldr	r3, [r7, #24]
 8000250:	601a      	str	r2, [r3, #0]
	*pModeReg_A |= (0x5 << 8);//set
 8000252:	69bb      	ldr	r3, [r7, #24]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 800025a:	69bb      	ldr	r3, [r7, #24]
 800025c:	601a      	str	r2, [r3, #0]

//enabling the up resistor for PA2 and PA3 for port A
	*pPullUpDownReg_A &= ~(0xF << 4);//clear
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	601a      	str	r2, [r3, #0]
	*pPullUpDownReg_A |= (0x5 << 4);//set
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	601a      	str	r2, [r3, #0]
*/

/* Loop forever */
	while(1){
//make all row gpios HIGH PD11 and PD12
	*pOutputDataReg_D |= (0x3 << 11);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f443 52c0 	orr.w	r2, r3, #6144	; 0x1800
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	601a      	str	r2, [r3, #0]

//make row1(PD11) LOW and row2(PD12) HIGH
	*pOutputDataReg_D &= ~(0x1 << 11);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	601a      	str	r2, [r3, #0]

//scan the columns
//check if coloumn1(PA2) is LOW or HIGH
	if( !(*pInputDataReg_A & (1 << 2)) ){
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f003 0304 	and.w	r3, r3, #4
 8000296:	2b00      	cmp	r3, #0
 8000298:	d10f      	bne.n	80002ba <main+0xd2>
		//key is pressed
		delay();
 800029a:	f000 f86b 	bl	8000374 <delay>
		*pOutputDataReg_A |= (1 << 4);// Turn LED ON(PA4)
 800029e:	693b      	ldr	r3, [r7, #16]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f043 0210 	orr.w	r2, r3, #16
 80002a6:	693b      	ldr	r3, [r7, #16]
 80002a8:	601a      	str	r2, [r3, #0]
		delay();
 80002aa:	f000 f863 	bl	8000374 <delay>
		*pOutputDataReg_A &= ~(1 << 4);// Turn LED OFF(PA4)
 80002ae:	693b      	ldr	r3, [r7, #16]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f023 0210 	bic.w	r2, r3, #16
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	601a      	str	r2, [r3, #0]

	}

//check if coloumn2(PA3) is LOW or HIGH
	if( !(*pInputDataReg_A & (1 << 3)) ){
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f003 0308 	and.w	r3, r3, #8
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d10f      	bne.n	80002e6 <main+0xfe>
			//key is pressed
		delay();
 80002c6:	f000 f855 	bl	8000374 <delay>
		*pOutputDataReg_A |= (1 << 5);// Turn LED ON(PA5)
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 0220 	orr.w	r2, r3, #32
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	601a      	str	r2, [r3, #0]
		delay();
 80002d6:	f000 f84d 	bl	8000374 <delay>
		*pOutputDataReg_A &= ~(1 << 5);// Turn LED ON(PA5)
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f023 0220 	bic.w	r2, r3, #32
 80002e2:	693b      	ldr	r3, [r7, #16]
 80002e4:	601a      	str	r2, [r3, #0]

		}

//make all row gpios HIGH PD2 and PD3
	*pOutputDataReg_D |= (0x3 << 11);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f443 52c0 	orr.w	r2, r3, #6144	; 0x1800
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	601a      	str	r2, [r3, #0]

//make row1(PD2) LOW
	*pOutputDataReg_D &= ~(0x1 << 12);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	601a      	str	r2, [r3, #0]
//scan the columns
//check if coloumn1(PA2) is LOW or HIGH

	//scan the columns
	//check if coloumn1(PA2) is LOW or HIGH
		if( !(*pInputDataReg_A & (1 << 2)) ){
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d10f      	bne.n	800032a <main+0x142>
			//key is pressed
			delay();
 800030a:	f000 f833 	bl	8000374 <delay>
			*pOutputDataReg_A |= (1 << 4);// Turn LED ON(PA4)
 800030e:	693b      	ldr	r3, [r7, #16]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f043 0210 	orr.w	r2, r3, #16
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	601a      	str	r2, [r3, #0]
			delay();
 800031a:	f000 f82b 	bl	8000374 <delay>
			*pOutputDataReg_A &= ~(1 << 4);// Turn LED OFF(PA4)
 800031e:	693b      	ldr	r3, [r7, #16]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f023 0210 	bic.w	r2, r3, #16
 8000326:	693b      	ldr	r3, [r7, #16]
 8000328:	601a      	str	r2, [r3, #0]

		}

	//check if coloumn1(PA3) is LOW or HIGH
		if( !(*pInputDataReg_A & (1 << 3)) ){
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f003 0308 	and.w	r3, r3, #8
 8000332:	2b00      	cmp	r3, #0
 8000334:	d19f      	bne.n	8000276 <main+0x8e>
				//key is pressed
			delay();
 8000336:	f000 f81d 	bl	8000374 <delay>
			*pOutputDataReg_A |= (1 << 5);// Turn LED ON(PA5)
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f043 0220 	orr.w	r2, r3, #32
 8000342:	693b      	ldr	r3, [r7, #16]
 8000344:	601a      	str	r2, [r3, #0]
			delay();
 8000346:	f000 f815 	bl	8000374 <delay>
			*pOutputDataReg_A &= ~(1 << 5);// Turn LED ON(PA5)
 800034a:	693b      	ldr	r3, [r7, #16]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f023 0220 	bic.w	r2, r3, #32
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	601a      	str	r2, [r3, #0]
	*pOutputDataReg_D |= (0x3 << 11);
 8000356:	e78e      	b.n	8000276 <main+0x8e>
 8000358:	40023830 	.word	0x40023830
 800035c:	40020000 	.word	0x40020000
 8000360:	40020c00 	.word	0x40020c00
 8000364:	40020014 	.word	0x40020014
 8000368:	40020010 	.word	0x40020010
 800036c:	4002000c 	.word	0x4002000c
 8000370:	40020c14 	.word	0x40020c14

08000374 <delay>:
			}

	}
}

void delay (void){
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i < 300000 ; i++  );
 800037a:	2300      	movs	r3, #0
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	e002      	b.n	8000386 <delay+0x12>
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3301      	adds	r3, #1
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a04      	ldr	r2, [pc, #16]	; (800039c <delay+0x28>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d9f8      	bls.n	8000380 <delay+0xc>
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	000493df 	.word	0x000493df

080003a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a0:	480d      	ldr	r0, [pc, #52]	; (80003d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003a2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a8:	480c      	ldr	r0, [pc, #48]	; (80003dc <LoopForever+0x6>)
  ldr r1, =_edata
 80003aa:	490d      	ldr	r1, [pc, #52]	; (80003e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003ac:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <LoopForever+0xe>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b0:	e002      	b.n	80003b8 <LoopCopyDataInit>

080003b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b6:	3304      	adds	r3, #4

080003b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003bc:	d3f9      	bcc.n	80003b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c0:	4c0a      	ldr	r4, [pc, #40]	; (80003ec <LoopForever+0x16>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c4:	e001      	b.n	80003ca <LoopFillZerobss>

080003c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c8:	3204      	adds	r2, #4

080003ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003cc:	d3fb      	bcc.n	80003c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ce:	f000 f811 	bl	80003f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003d2:	f7ff ff09 	bl	80001e8 <main>

080003d6 <LoopForever>:

LoopForever:
    b LoopForever
 80003d6:	e7fe      	b.n	80003d6 <LoopForever>
  ldr   r0, =_estack
 80003d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e4:	0800045c 	.word	0x0800045c
  ldr r2, =_sbss
 80003e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003ec:	2000001c 	.word	0x2000001c

080003f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f0:	e7fe      	b.n	80003f0 <ADC_IRQHandler>
	...

080003f4 <__libc_init_array>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	4e0d      	ldr	r6, [pc, #52]	; (800042c <__libc_init_array+0x38>)
 80003f8:	4c0d      	ldr	r4, [pc, #52]	; (8000430 <__libc_init_array+0x3c>)
 80003fa:	1ba4      	subs	r4, r4, r6
 80003fc:	10a4      	asrs	r4, r4, #2
 80003fe:	2500      	movs	r5, #0
 8000400:	42a5      	cmp	r5, r4
 8000402:	d109      	bne.n	8000418 <__libc_init_array+0x24>
 8000404:	4e0b      	ldr	r6, [pc, #44]	; (8000434 <__libc_init_array+0x40>)
 8000406:	4c0c      	ldr	r4, [pc, #48]	; (8000438 <__libc_init_array+0x44>)
 8000408:	f000 f818 	bl	800043c <_init>
 800040c:	1ba4      	subs	r4, r4, r6
 800040e:	10a4      	asrs	r4, r4, #2
 8000410:	2500      	movs	r5, #0
 8000412:	42a5      	cmp	r5, r4
 8000414:	d105      	bne.n	8000422 <__libc_init_array+0x2e>
 8000416:	bd70      	pop	{r4, r5, r6, pc}
 8000418:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800041c:	4798      	blx	r3
 800041e:	3501      	adds	r5, #1
 8000420:	e7ee      	b.n	8000400 <__libc_init_array+0xc>
 8000422:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000426:	4798      	blx	r3
 8000428:	3501      	adds	r5, #1
 800042a:	e7f2      	b.n	8000412 <__libc_init_array+0x1e>
 800042c:	08000454 	.word	0x08000454
 8000430:	08000454 	.word	0x08000454
 8000434:	08000454 	.word	0x08000454
 8000438:	08000458 	.word	0x08000458

0800043c <_init>:
 800043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043e:	bf00      	nop
 8000440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000442:	bc08      	pop	{r3}
 8000444:	469e      	mov	lr, r3
 8000446:	4770      	bx	lr

08000448 <_fini>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	bf00      	nop
 800044c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044e:	bc08      	pop	{r3}
 8000450:	469e      	mov	lr, r3
 8000452:	4770      	bx	lr
